#!/bin/bash
# messages(msg): shell include for printing out programm messages and errors.
# functions:
#   DEBUG: prints a debug message according to debug level to stderr
#   msg_message: prints a message according to verbosity level to stdout
#   msg_error: print a message to stderr. calls exit if msg-panic == true
SCRIPT_NAME="msg"
SCRIPT_VERSION="1.0.0rc1"
SCRIPT_PREFIX="msg"
SCRIPT_PACKAGE="bash_include"
SCRIPT_DESCRIPTION="tools for printing out programm messages and errors"

. bash_include
include basic

module_begin "${@}"

# global variables and constants:
msg_debug_level="0"
msg_verbose_level="1"
msg_panic="false" # if true msg_error calls exit.
msg_error_code="1" # default exit value for msg_error if msg_panic == true.

# DEBUG: prints a debug message according to debug level to stderr
# returns always 0
DEBUG() {
	local text=""
	local d_level

	# use last non-empty parameter below msg_debug_level as message to print
	for (( d_level = 0; (d_level < msg_debug_level) && ($# > 0); ++d_level )); do
		text="${1:-$text}"
		shift
	done

	if [ "${text:+set}" ]; then
		1>&2 printf "%s\n" "${text}"
	fi
	true
}

# msg_message: prints a message according to verbosity level to stdout
# returns always 0
msg_message() {
	local msg_text=""
	local v_level
	
	for (( v_level = 0; (v_level < msg_verbose_level) && ($# > 0); ++v_level )); do
		text="${1:-$text}"
		shift
	done
	
	if [ "${text:+set}" ]; then
		printf "%s: %s\n" "${program_name}" "${text}"
	fi
	true
}

# msg_error: print a message to stderr. calls exit if msg-panic == true
# exit code is $2 if set, $msg_error_code otherwise
msg_error() {
	local error="${2-${msg_error_code}}"

	[ "${1:+not empty}" ] &&
		printf "%s: %s\n" "${program_name}" "${1}" 1>&2

	# abort execution on error
	"${msg_panic}" &&
		exit "${error}"

	return "${error}"
}

module_end "${@}" # checks if is running stand alone, or as included module.
