#!/bin/bash
# error(err): error definitions.
# functions:
#   err_to_str: prints a description for the error given in $1.
SCRIPT_NAME="error"
SCRIPT_VERSION="0.2.0"
SCRIPT_PREFIX="err"
SCRIPT_DESCRIPTION="mappings and descriptions for <errno.h> standard error numbers"
SCRIPT_PACKAGE="bash_include"

. bash_include		# load include function
include basic

module_begin "${@}"	# initializes some module related stuff

# error constants and descriptions:
err_NOERROR=$((0))			err_DESCRIPTION[err_NOERROR]="No error"
err_PERM=$((1))				err_DESCRIPTION[err_PERM]="Operation not permitted"
err_NOENT=$((2))			err_DESCRIPTION[err_NOENT]="No such file or directory"
err_SRCH=$((3))				err_DESCRIPTION[err_SRCH]="No such process"
err_INTR=$((4))				err_DESCRIPTION[err_INTR]="Interrupted system call"
err_IO=$((5))				err_DESCRIPTION[err_IO]="I/O error"
err_NXIO=$((6))				err_DESCRIPTION[err_NXIO]="No such device or address"
err_2BIG=$((7))				err_DESCRIPTION[err_2BIG]="Argument list too long"
err_NOEXEC=$((8))			err_DESCRIPTION[err_NOEXEC]="Exec format error"
err_BADF=$((9))				err_DESCRIPTION[err_BADF]="Bad file number"
err_CHILD=$((10))			err_DESCRIPTION[err_CHILD]="No child processes"
err_AGAIN=$((11))			err_DESCRIPTION[err_AGAIN]="Try again"
err_NOMEM=$((12))			err_DESCRIPTION[err_NOMEM]="Out of memory"
err_ACCES=$((13))			err_DESCRIPTION[err_ACCES]="Permission denied"
err_FAULT=$((14))			err_DESCRIPTION[err_FAULT]="Bad address"
err_NOTBLK=$((15))			err_DESCRIPTION[err_NOTBLK]="Block device required"
err_BUSY=$((16))			err_DESCRIPTION[err_BUSY]="Device or resource busy"
err_EXIST=$((17))			err_DESCRIPTION[err_EXIST]="File exists"
err_XDEV=$((18))			err_DESCRIPTION[err_XDEV]="Cross-device link"
err_NODEV=$((19))			err_DESCRIPTION[err_NODEV]="No such device"
err_NOTDIR=$((20))			err_DESCRIPTION[err_NOTDIR]="Not a directory"
err_ISDIR=$((21))			err_DESCRIPTION[err_ISDIR]="Is a directory"
err_INVAL=$((22))			err_DESCRIPTION[err_INVAL]="Invalid argument"
err_NFILE=$((23))			err_DESCRIPTION[err_NFILE]="File table overflow"
err_MFILE=$((24))			err_DESCRIPTION[err_MFILE]="Too many open files"
err_NOTTY=$((25))			err_DESCRIPTION[err_NOTTY]="Not a typewriter"
err_TXTBSY=$((26))			err_DESCRIPTION[err_TXTBSY]="Text file busy"
err_FBIG=$((27))			err_DESCRIPTION[err_FBIG]="File too large"
err_NOSPC=$((28))			err_DESCRIPTION[err_NOSPC]="No space left on device"
err_SPIPE=$((29))			err_DESCRIPTION[err_SPIPE]="Illegal seek"
err_ROFS=$((30))			err_DESCRIPTION[err_ROFS]="Read-only file system"
err_MLINK=$((31))			err_DESCRIPTION[err_MLINK]="Too many links"
err_PIPE=$((32))			err_DESCRIPTION[err_PIPE]="Broken pipe"
err_DOM=$((33))				err_DESCRIPTION[err_DOM]="Math argument out of domain of func"
err_RANGE=$((34))			err_DESCRIPTION[err_RANGE]="Math result not representable"
err_DEADLK=$((35))			err_DESCRIPTION[err_DEADLK]="Resource deadlock would occur"
err_NAMETOOLONG=$((36))			err_DESCRIPTION[err_NAMETOOLONG]="File name too long"
err_NOLCK=$((37))			err_DESCRIPTION[err_NOLCK]="No record locks available"
err_NOSYS=$((38))			err_DESCRIPTION[err_NOSYS]="Function not implemented"
err_NOTEMPTY=$((39))			err_DESCRIPTION[err_NOTEMPTY]="Directory not empty"
err_LOOP=$((40))			err_DESCRIPTION[err_LOOP]="Too many symbolic links encountered"
err_WOULDBLOCK=$((41))			err_DESCRIPTION[err_WOULDBLOCK]="Operation would block"
err_NOMSG=$((42))			err_DESCRIPTION[err_NOMSG]="No message of desired type"
err_IDRM=$((43))			err_DESCRIPTION[err_IDRM]="Identifier removed"
err_CHRNG=$((44))			err_DESCRIPTION[err_CHRNG]="Channel number out of range"
err_L2NSYNC=$((45))			err_DESCRIPTION[err_L2NSYNC]="Level 2 not synchronized"
err_L3HLT=$((46))			err_DESCRIPTION[err_L3HLT]="Level 3 halted"
err_L3RST=$((47))			err_DESCRIPTION[err_L3RST]="Level 3 reset"
err_LNRNG=$((48))			err_DESCRIPTION[err_LNRNG]="Link number out of range"
err_UNATCH=$((49))			err_DESCRIPTION[err_UNATCH]="Protocol driver not attached"
err_NOCSI=$((50))			err_DESCRIPTION[err_NOCSI]="No CSI structure available"
err_L2HLT=$((51))			err_DESCRIPTION[err_L2HLT]="Level 2 halted"
err_BADE=$((52))			err_DESCRIPTION[err_BADE]="Invalid exchange"
err_BADR=$((53))			err_DESCRIPTION[err_BADR]="Invalid request descriptor"
err_XFULL=$((54))			err_DESCRIPTION[err_XFULL]="Exchange full"
err_NOANO=$((55))			err_DESCRIPTION[err_NOANO]="No anode"
err_BADRQC=$((56))			err_DESCRIPTION[err_BADRQC]="Invalid request code"
err_BADSLT=$((57))			err_DESCRIPTION[err_BADSLT]="Invalid slot"
err_BFONT=$((59))			err_DESCRIPTION[err_BFONT]="Bad font file format"
err_NOSTR=$((60))			err_DESCRIPTION[err_NOSTR]="Device not a stream"
err_NODATA=$((61))			err_DESCRIPTION[err_NODATA]="No data available"
err_TIME=$((62))			err_DESCRIPTION[err_TIME]="Timer expired"
err_NOSR=$((63))			err_DESCRIPTION[err_NOSR]="Out of streams resources"
err_NONET=$((64))			err_DESCRIPTION[err_NONET]="Machine is not on the network"
err_NOPKG=$((65))			err_DESCRIPTION[err_NOPKG]="Package not installed"
err_REMOTE=$((66))			err_DESCRIPTION[err_REMOTE]="Object is remote"
err_NOLINK=$((67))			err_DESCRIPTION[err_NOLINK]="Link has been severed"
err_ADV=$((68))				err_DESCRIPTION[err_ADV]="Advertise error"
err_SRMNT=$((69))			err_DESCRIPTION[err_SRMNT]="Srmount error"
err_COMM=$((70))			err_DESCRIPTION[err_COMM]="Communication error on send"
err_PROTO=$((71))			err_DESCRIPTION[err_PROTO]="Protocol error"
err_MULTIHOP=$((72))			err_DESCRIPTION[err_MULTIHOP]="Multihop attempted"
err_DOTDOT=$((73))			err_DESCRIPTION[err_DOTDOT]="RFS specific error"
err_BADMSG=$((74))			err_DESCRIPTION[err_BADMSG]="Not a data message"
err_OVERFLOW=$((75))			err_DESCRIPTION[err_OVERFLOW]="Value too large for defined data type"
err_NOTUNIQ=$((76))			err_DESCRIPTION[err_NOTUNIQ]="Name not unique on network"
err_BADFD=$((77))			err_DESCRIPTION[err_BADFD]="File descriptor in bad state"
err_REMCHG=$((78))			err_DESCRIPTION[err_REMCHG]="Remote address changed"
err_LIBACC=$((79))			err_DESCRIPTION[err_LIBACC]="Can not access a needed shared library"
err_LIBBAD=$((80))			err_DESCRIPTION[err_LIBBAD]="Accessing a corrupted shared library"
err_LIBSCN=$((81))			err_DESCRIPTION[err_LIBSCN]=".lib section in a.out corrupted"
err_LIBMAX=$((82))			err_DESCRIPTION[err_LIBMAX]="Attempting to link in too many shared libraries"
err_LIBEXEC=$((83))			err_DESCRIPTION[err_LIBEXEC]="Cannot exec a shared library directly"
err_ILSEQ=$((84))			err_DESCRIPTION[err_ILSEQ]="Illegal byte sequence"
err_RESTART=$((85))			err_DESCRIPTION[err_RESTART]="Interrupted system call should be restarted"
err_STRPIPE=$((86))			err_DESCRIPTION[err_STRPIPE]="Streams pipe error"
err_USERS=$((87))			err_DESCRIPTION[err_USERS]="Too many users"
err_NOTSOCK=$((88))			err_DESCRIPTION[err_NOTSOCK]="Socket operation on non-socket"
err_DESTADDRREQ=$((89))			err_DESCRIPTION[err_DESTADDRREQ]="Destination address required"
err_MSGSIZE=$((90))			err_DESCRIPTION[err_MSGSIZE]="Message too long"
err_PROTOTYPE=$((91))			err_DESCRIPTION[err_PROTOTYPE]="Protocol wrong type for socket"
err_NOPROTOOPT=$((92))			err_DESCRIPTION[err_NOPROTOOPT]="Protocol not available"
err_PROTONOSUPPORT=$((93))		err_DESCRIPTION[err_PROTONOSUPPORT]="Protocol not supported"
err_SOCKTNOSUPPORT=$((94))		err_DESCRIPTION[err_SOCKTNOSUPPORT]="Socket type not supported"
err_OPNOTSUPP=$((95))			err_DESCRIPTION[err_OPNOTSUPP]="Operation not supported on transport endpoint"
err_PFNOSUPPORT=$((96))			err_DESCRIPTION[err_PFNOSUPPORT]="Protocol family not supported"
err_AFNOSUPPORT=$((97))			err_DESCRIPTION[err_AFNOSUPPORT]="Address family not supported by protocol"
err_ADDRINUSE=$((98))			err_DESCRIPTION[err_ADDRINUSE]="Address already in use"
err_ADDRNOTAVAIL=$((99))		err_DESCRIPTION[err_ADDRNOTAVAIL]="Cannot assign requested address"
err_NETDOWN=$((100))			err_DESCRIPTION[err_NETDOWN]="Network is down"
err_NETUNREACH=$((101))			err_DESCRIPTION[err_NETUNREACH]="Network is unreachable"
err_NETRESET=$((102))			err_DESCRIPTION[err_NETRESET]="Network dropped connection because of reset"
err_CONNABORTED=$((103))		err_DESCRIPTION[err_CONNABORTED]="Software caused connection abort"
err_CONNRESET=$((104))			err_DESCRIPTION[err_CONNRESET]="Connection reset by peer"
err_NOBUFS=$((105))			err_DESCRIPTION[err_NOBUFS]="No buffer space available"
err_ISCONN=$((106))			err_DESCRIPTION[err_ISCONN]="Transport endpoint is already connected"
err_NOTCONN=$((107))			err_DESCRIPTION[err_NOTCONN]="Transport endpoint is not connected"
err_SHUTDOWN=$((108))			err_DESCRIPTION[err_SHUTDOWN]="Cannot send after transport endpoint shutdown"
err_TOOMANYREFS=$((109))		err_DESCRIPTION[err_TOOMANYREFS]="Too many references: cannot splice"
err_TIMEDOUT=$((110))			err_DESCRIPTION[err_TIMEDOUT]="Connection timed out"
err_CONNREFUSED=$((111))		err_DESCRIPTION[err_CONNREFUSED]="Connection refused"
err_HOSTDOWN=$((112))			err_DESCRIPTION[err_HOSTDOWN]="Host is down"
err_HOSTUNREACH=$((113))		err_DESCRIPTION[err_HOSTUNREACH]="No route to host"
err_ALREADY=$((114))			err_DESCRIPTION[err_ALREADY]="Operation already in progress"
err_INPROGRESS=$((115))			err_DESCRIPTION[err_INPROGRESS]="Operation now in progress"
err_STALE=$((116))			err_DESCRIPTION[err_STALE]="Stale NFS file handle"
err_UCLEAN=$((117))			err_DESCRIPTION[err_UCLEAN]="Structure needs cleaning"
err_NOTNAM=$((118))			err_DESCRIPTION[err_NOTNAM]="Not a XENIX named type file"
err_NAVAIL=$((119))			err_DESCRIPTION[err_NAVAIL]="No XENIX semaphores available"
err_ISNAM=$((120))			err_DESCRIPTION[err_ISNAM]="Is a named type file"
err_REMOTEIO=$((121))			err_DESCRIPTION[err_REMOTEIO]="Remote I/O error"
err_DQUOT=$((122))			err_DESCRIPTION[err_DQUOT]="Quota exceeded"
err_NOMEDIUM=$((123))			err_DESCRIPTION[err_NOMEDIUM]="No medium found"
err_MEDIUMTYPE=$((124))			err_DESCRIPTION[err_MEDIUMTYPE]="Wrong medium type"
err_CANCELED=$((125))			err_DESCRIPTION[err_CANCELED]="Operation Canceled"
err_NOKEY=$((126))			err_DESCRIPTION[err_NOKEY]="Required key not available"
err_KEYEXPIRED=$((127))			err_DESCRIPTION[err_KEYEXPIRED]="Key has expired"
err_KEYREVOKED=$((128))			err_DESCRIPTION[err_KEYREVOKED]="Key has been revoked"
err_KEYREJECTED=$((129))		err_DESCRIPTION[err_KEYREJECTED]="Key was rejected by service"
err_OWNERDEAD=$((130))			err_DESCRIPTION[err_OWNERDEAD]="Owner died"
err_NOTRECOVERABLE=$((131))		err_DESCRIPTION[err_NOTRECOVERABLE]="State not recoverable"
err_RESTARTSYS=512
err_RESTARTNOINTR=513
err_RESTARTNOHAND=$((514))		err_DESCRIPTION[err_RESTARTNOHAND]="restart if no handler.."
err_NOIOCTLCMD=$((515))			err_DESCRIPTION[err_NOIOCTLCMD]="No ioctl command"
err_RESTART_RESTARTBLOCK=$((516))	err_DESCRIPTION[err_RESTART]="restart by calling sys_restart_syscall"
err_BADHANDLE=$((521))			err_DESCRIPTION[err_BADHANDLE]="Illegal NFS file handle"
err_NOTSYNC=$((522))			err_DESCRIPTION[err_NOTSYNC]="Update synchronization mismatch"
err_BADCOOKIE=$((523))			err_DESCRIPTION[err_BADCOOKIE]="Cookie is stale"
err_NOTSUPP=$((524))			err_DESCRIPTION[err_NOTSUPP]="Operation is not supported"
err_TOOSMALL=$((525))			err_DESCRIPTION[err_TOOSMALL]="Buffer or request is too small"
err_SERVERFAULT=$((526))		err_DESCRIPTION[err_SERVERFAULT]="An untranslatable error occurred"
err_BADTYPE=$((527))			err_DESCRIPTION[err_BADTYPE]="Type not supported by server"
err_JUKEBOX=$((528))			err_DESCRIPTION[err_JUKEBOX]="Request initiated, but will not complete before timeout"
err_IOCBQUEUED=$((529))			err_DESCRIPTION[err_IOCBQUEUED]="iocb queued, will get completion event"

err_NOARG=1025                  err_DESCRIPTION[err_NOARG]="too few arguments"

err_DEADLOCK=$((err_DEADLK))
err_NOTSUP=$((err_OPNOTSUPP))

# err_to_str: prints a description for the error given in $1.
err_to_str()
{
	# if there is no description for the given error return $err_INVAL
	test "${err_DESCRIPTION[${1}]:+set}" ||
		return "${err_INVAL}"

	printf "%s\n" "${err_DESCRIPTION[${1}]}"
}

module_end "${@}"	# checks if is running stand alone, or as included module.
