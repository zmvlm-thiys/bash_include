#!/bin/bash
# opt(opt) 1.9.5: command line parser
#                         supports gnu style longopts.
# functions:
#   opt_get(): command line parser.
#   opt_show_version(): shows script version
#   opt_show_usage(): shows short usage hint's based on the option array
#   opt_show_help(): shows more detailed help text
#   opt_check(): checks options for errors

SCRIPT_NAME="opt"
SCRIPT_PREFIX="opt"
SCRIPT_VERSION="1.9.5"
SCRIPT_DESCRIPTION="gnu style option parser"
SCRIPT_PACKAGE="bash_include"
SCRIPT_API="1"

. bash_include		# load include function
include basic
include err
include var

module_begin "${@}"		# initializes some module related stuff

# global variables and constants:
opt_no_opt_count=0	# number of non-options in command line.
opt_no_options=()	# array of non-options.
opt_last_argument=0	# last parsed command line argument
opt_additional_usage=""	# use this to append information to the usage string
opt_additional_help=""	# use this to append information to the help screen

# fields of an option record:
opt_TYPE=0		# specifies the type of an option (bOOL,  iNTEGER, rAW, sTRING).
opt_SHORT=1		# short names of an option.
opt_LONG=2		# long name of an option.
opt_ACTION=3		# what to do if an option is invoked.
opt_DEFAULT=4		# default value of an integer/raw/string option
opt_HELP=5		# help text for an option.

# function name: function description
opt_show_version()
(
  	printf "%s " "${SCRIPT_PACKAGE}"
	printf "%s" "${SCRIPT_NAME:-$(basename "$0")}"
	printf "%s" "${SCRIPT_VERSION:+-${SCRIPT_VERSION}}"
	printf "\n"
)

opt_show_usage()
(
	opt_show_version

	for option in "${!opt_option_@}"; do
		has_default=false
		type="$(@ "${option}[opt_TYPE]:0:1")"
		short="$(@ "${option}[opt_SHORT]:0:1")"
		has_default="$(@ "${option}[opt_DEFAULT]+true")"

		if [ -n "${short}" ]; then
    			case "${type}" in
				[iIfFrRsS])
					type_string="${type}"
					type_string="${type_string/[iI]/INT}"
					type_string="${type_string/[fF]/FLOAT}"
					type_string="${type_string/[rRsS]/STRING}"
					parameter_opts="${parameter_opts} -${short}"
					if ${has_default}; then
						parameter_opts="${parameter_opts}[${type_string}]"
					else
						parameter_opts="${parameter_opts} ${type_string}"
					fi
				;;
				*)
					non_parameter_opts="${non_parameter_opts}${short}"
				;;
			esac
		fi
	done
	printf "Usage: %s%s\n" "${program_name}" "${non_parameter_opts:+ -${non_parameter_opts}}${parameter_opts}${opt_additional_usage:+ ${opt_additional_usage}}"
	printf "Try '%s --help' for more information.\n" "${program_name}"
)

opt_show_help()
(
	help_text=()
	spacer="    "
	longest_line=0
	i=0

	opt_show_usage
	printf "\n"
  
	for option in "${!opt_option_@}"; do
		type="$(@ "${option}[opt_TYPE]:0:1")"
		short="$(@ "${option}[opt_SHORT]:0:1")"
		long="$(@ "${option}[opt_LONG]")"
		has_default="$(@ "${option}[opt_DEFAULT]+true") false"
		default="$(@ "${option}[opt_DEFAULT]")"

		if [ "${short:+not empty}" ]; then
			help_text[i]="  -${short:0:1}"
		else
			help_text[i]="     "
		fi
		if [ "${long:+not empty}" ]; then
			[ "${short:+not empty}" ] &&
				help_text[i]="${help_text[i]},"
			help_text[i]="${help_text[i]} --${long}"
		else
			help_text[i]="${help_text[i]} "
		fi
		
		${has_default} && help_text[i]="${help_text[i]}["
		case "${type}" in
			[iIfFrRsS])
				type_string="${type}"
				type_string="${type_string/[iI]/INT}"
				type_string="${type_string/[fF]/FLOAT}"
				type_string="${type_string/[rRsS]/STRING}"
				if [ -n "${long}" ]; then
					help_text[i]="${help_text[i]}=${type_string}"
				elif [ -n "${short}" ]; then
					help_text[i]="${help_text[i]}${type_string}"
				fi
			;;
		esac
		${has_default} && help_text[i]="${help_text[i]}]"

		((
			${#help_text[i]} > longest_line &&
				( longest_line = ${#help_text[i]} ),
			i += 1
		))
	done

	while (( ${#spacer} < longest_line )); do
		spacer="$spacer$spacer"
	done
	spacer="${spacer:0:longest_line}"
	COLUMNS="${COLUMNS:-80}"
	
	if (( ${#spacer} > COLUMNS - 10 )); then
		spacer="   "
	fi
	if (( COLUMNS < 10 )); then
		spacer=""
	fi

	i=0;
	for option in "${!opt_option_@}"; do
		while (( ${#help_text[i]} < longest_line )); do
			help_text[i]="${help_text[i]}${spacer:0:$((longest_line - ${#help_text[i]} - 1))} "
		done
		help_text[i]="${help_text[i]} $(@ "${option}[opt_HELP]")"
		while (( ${#help_text[i]} > COLUMNS )); do
			text="${help_text[i]:0:$((COLUMNS + 1))}"
			while (( ${#text} > 0 )) && [ "X${text:$(( ${#text} - 1 )):${#text}}X" != "X X" ]; do
				text="${text:0:$(( ${#text} - 1 ))}"
			done
			printf "%s\n" "${text:0:$(( ${#text} - 1 ))}"
			help_text[i]="${spacer} ${help_text[i]:${#text}}"
		done
		printf "%s\n" "${help_text[i]}"
		(( i += 1 ))
	done

	for additional_entry in ${!opt_additional_help_entry_@}; do
		item="$(@ "${additional_entry}[0]")"
		text="$(@ "${additional_entry}[1]")"
		printf "  %s%s%s\n" "${item}" "${spacer:0:$(( ${#spacer} - ${#item} - 1 ))}" "${text}"
	done

	printf "%s" "${opt_additional_help}"
)

opt_bad_option()
(
	printf '%s: %s: %s\n' "${program_name}" "${1}" "${2}" 1>&2
  	opt_show_usage
	return ${err_INVAL}
)

opt_no_option()
{
	local arg
	for arg in "${@}"; do
		opt_no_options[opt_no_opt_count]="${arg}"
		(( opt_no_opt_count += 1 ))
	done
}

test_is_int()
(
	shopt -s extglob
	val="${1}"
	
	val="${val}XY"
	val="${val#[+-]}"
	val="${val##[123456789]*([0123456789])X}"
	val="${val##0x+([0123456789ABCDEFabcdef])X}"
	val="${val##0*([01234567])X}"

	[ 'Y' = "${val}" ]
)

test_is_float()
(
	shopt -s extglob
	val="${1}"

	val="${val}XY"
	val="${val#[+-]}"
	val="${val##*([0123456789]).}"
	val="${val##+([0123456789])[Ee]}"
	val="${val#[+-]}"
	val="${val##+([0123456789])X}"

	[ 'Y' = "${val}" ]
)

opt_get()
{
	# localy used variables  #
	local short              # keeps short option string 
	local num                # number of the currently checked option
	local type               # the options type
	local action             # the options asociated action
	local default            # the options default value
	local has_default=false  # if the has a default value
	local val                # the options eventual parameter
	local requested=false    # if the options has the form --opt=*
	local val_is_opt=false   # if val was passed within the same argument (eg: -oval)
	local val_not_used=false # if the option ignores val

	# create a hash string to find options fast:
	for opt in "${!opt_option_@}"; do
		short="$(@ "${opt}[opt_SHORT]")"
		while (( ${#short} )); do
			opt_SHASH="$opt_SHASH-${short:0:1}:${opt##opt_option_}"
			short=${short:1}
		done
		opt_LHASH="$opt_LHASH--$(@ "${opt}[opt_LONG]"):${opt##opt_option_}"
	done

	while [ ${1+set} ]; do
		(( opt_last_argument += 1 ))
		true $opt_last_argument
		opt="${1}"

		# these variables have to be uninitialized in every loop
		unset num
		unset val
		requested=false
		val_is_opt=false
		val_not_used=false

		case "${opt}" in
			--=*)
				opt_bad_option "malformed option" "${opt}"; return
			;;
			-)
				opt_no_option "${1}"
				shift
				continue
			;;
			--)
				shift
				opt_no_option "${@}"
				break
			;;
			--*=*)
				val="${opt#*=}"
				opt="${opt%%=*}"
				num="${opt_LHASH#*"${opt}":}"                    #"
				num="${num%%--*}"
				requested=true
			;;
			--*--*)
				opt_bad_option "malformed option" "${opt}"; return
			;;
			--*)
				num="${opt_LHASH#*"${opt}":}"                     #"
				num="${num%%--*}"
#				set -- unshift "${@}"
				if [ ${2+set} ]; then
					val="${2}"
					shift
				fi
			;;
			-*)
				val="${opt:2}"
				opt="${opt:0:2}"
				num="${opt_SHASH#*"${opt}":}"                     #"
				num="${num%%-*}"
				val_is_opt=true

				if ${val:+false}; then
					unset val
					val_is_opt=false
					if [ "${2+set}" ]; then
						val="${2}"
						shift
					fi
				fi
			;;
			*)
				opt_no_option "${1}"
				shift
				continue
			;;
		esac
		if ${num:+false}; then
			opt_bad_option 'unknown option' "${opt}"; return
		fi

		type="$(@ "opt_option_${num}[opt_TYPE]")"
		action="$(@ "opt_option_${num}[opt_ACTION]")"
		default="$(@ "opt_option_${num}[opt_DEFAULT]")"
		has_default="$(@ "opt_option_${num}[opt_DEFAULT]+true") false"

		case "${type}" in
			[bB])
				if ${requested}; then
					opt_bad_option 'unexpected parameter in option' "${opt}"; return
				fi
				val_not_used=true
			;;
			[iI])
				if test_is_int "${val}"; then
					val=$((val))
				else
					if ! ${requested} && ${has_default}; then
						val_not_used=true
					else
						opt_bad_option 'option needs an integer value' "${opt}"; return
					fi
				fi
			;;
			[fF])
				if ! test_is_float "${val}"; then
					if ! ${requested} && ${has_default}; then
						val_not_used=true
					else
						opt_bad_option 'option needs an floating point value' "${opt}"; return
					fi
				fi
			;;
			[sS])
				if ${val:+false}; then
					if ! ${requested} && ${has_default}; then
						val_not_used=true
					else
						opt_bad_option 'option requires a non-empty parameter' "${opt}"; return
					fi
				fi
			;;
			[rR])
				if ${val+false}; then
					if ! ${requested} && ${has_default}; then
						val_not_used=true
					else
						opt_bad_option 'parameter is missing for option' "${opt}"; return
					fi
				fi
			;;
		esac
		if ${val_not_used}; then
			shift
			if ${val_is_opt}; then
				if [ 'X-X' = "X${val:0:1}X" ]; then
					val="${val:1}"
					opt_NO_MORE_OPTS=true
				else
					val="-${val}"
					(( opt_last_argument -= 1 ))	
				fi
			fi
			[ "${val+set}" ] &&
				set -- unshift "${val}" "${@}"
			
			val="${default}"
		elif ! ${val_is_opt} && ! ${requested} && [ ${val+set} ]; then
			(( opt_last_argument += 1 ))	
		fi

		parameter="${val}"
		eval "${action}"

		shift
	done

	return 0
}

_opt_test()
{
	msg_panic=false
	msg_verbose_level=1
	msg_debug_level=0
	lr_force=false
	lr_preserve=true
	lr_resolve_level=0
	lr_fallback_level=0
	lr_relative=false
	lr_absolute=false
	lr_simplify=false
	lr_dive=false
	lr_source_list=()

	opt_option_00=(b "c"  "careful"         'msg_panic="true"')
	opt_option_00[opt_HELP]="stop if error occurs."
	opt_option_01=(b "q"  "quiet"           'msg_verbose_level=0')
	opt_option_01[opt_HELP]="dont print any message."
	opt_option_02=(b "v"  "verbose"         '(( msg_verbose_level += 1 ))')
	opt_option_02[opt_HELP]="be verbose (each invocation increase verbosity)."
	opt_option_03=(b "f"  "force"           'lr_force="true"')
	opt_option_03[opt_HELP]="link even if file already exists."
	opt_option_04=(b "p"  "preserve"        'lr_resolve_level="0"; lr_preserve="true"')
	opt_option_04[opt_HELP]="preserve links, so the final link points to the linked directory-structure"
	opt_option_05=(i "r"  "resolve"         'lr_resolve_level="${parameter}"; lr_preserve="false"' 10)
	opt_option_05[opt_HELP]="resolv links, so the final link points to a real file."
	opt_option_06=(f "b"  "fallback"        'lr_fallback_level="${parameter}"')
	opt_option_06[opt_HELP]="if it is not possible to resolve, fall back to the Nth level."
	opt_option_07=(i "D"  "debug"           'msg_debug_level="${parameter}"')
	opt_option_07[opt_HELP]="set DEBUG level."
	opt_option_08=(f ""   "verbosity"       'msg_verbose_level="${parameter}"')
	opt_option_08[opt_HELP]="set verbosity"
	opt_option_09=(b "R"  "relative"        'lr_relative="true"; lr_absolute="false"')
	opt_option_09[opt_HELP]="make final links relativ."
	opt_option_10=(b "A"  "absolute"        'lr_absolute="true"; lr_relative="false"')
	opt_option_10[opt_HELP]="make final links absolute."
	opt_option_11=(b "U"  "unchanged"       'lr_absolute="false"; lr_relative="false"; lr_simplify="false"')
	opt_option_11[opt_HELP]="dont touch final links."
	opt_option_12=(b "S"  "simplify"        'lr_simplify="true"')
	opt_option_12[opt_HELP]="simplify final links"
	opt_option_13=(b "d"  "dive"            'lr_dive=true')
	opt_option_13[opt_HELP]="dive into subdir's, don not symlink dirs"
	opt_option_14=(s "s"  "source"          'lr_source_list[${#lr_source_list[@]}]="${parameter}"')
	opt_option_14[opt_HELP]="add STRING to source list."
	opt_option_15=(r "t"  "target"          'lr_target="${parameter}"')
	opt_option_15[opt_HELP]="use STRING as destination"
	opt_option_16=(b "V"  "version"         'opt_show_version; exit')
	opt_option_16[opt_HELP]="shows version."
	opt_option_17=(b "h?" "help"            'opt_show_help; exit')
	opt_option_17[opt_HELP]="shows this text and exits. and this is going to be an extra long line of helping advice."

	opt_show_help
	opt_get "${@}"
	
	printf '\n%s, %i\n' "$*" "$opt_last_argument"
	
	printf 'panic:    %s\n' "$msg_panic"
	printf 'verbose:  %s\n' "$msg_verbose_level"
	printf 'debug:    %s\n' "$msg_debug_level"
	printf 'force:    %s\n' "$lr_force"
	printf 'preserve: %s\n' "$lr_preserve"
	printf 'resolve:  %s\n' "$lr_resolve_level"
	printf 'fallback: %s\n' "$lr_fallback_level"
	printf 'relative: %s\n' "$lr_relative"
	printf 'absolute: %s\n' "$lr_absolute"
	printf 'simplify: %s\n' "$lr_simplify"
	printf 'dive:     %s\n' "$lr_dive"
	
	if [ "${lr_target+set}" ]; then
		printf 'target:   %s\n' "$lr_target"
	elif (( opt_no_opt_count > 0 )); then
		printf 'target:   %s\n' "${opt_no_options[opt_no_opt_count - 1]}"
		unset "opt_no_options[opt_no_opt_count - 1]"
	fi
		
	for source in "${lr_source_list[@]}"; do
		printf "<${source}> "
	done
	printf "${lr_source_list[*]+\n}"

	for source in "${opt_no_options[@]}"; do
		printf "[${source}] "
	done
	printf "${opt_no_options[*]+\n}"
	alias
}

module_end "${@}"	# checks if is running stand alone, or as included module.
