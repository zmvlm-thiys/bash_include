#!/bin/bash

#Copyright (c) 2012, Eric Karge
#All rights reserved.

#Redistribution and use in source and binary forms, with or without
#modification, are permitted provided that the following conditions are
#met:

#Redistributions of source code must retain the above copyright notice,
#this list of conditions and the following disclaimer. Redistributions in
#binary form must reproduce the above copyright notice, this list of
#conditions and the following disclaimer in the documentation and/or
#other materials provided with the distribution.

#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
#TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
#PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# bash_include
# Bash enhancement for repeative complex scripts
# this script has to be sourced in to get the feature
# of 'include'
# include 'basic' will load the script 'basic' from @libentrydir@

# dont load if already set
test ${BASH_INCLUDE+set} &&
	return
BASH_INCLUDE=true

 ##
 # Check if $1 has been included already
 # @return 0 if is included and 1 if not
##
is_included()
{
	local IFS=$'\n'
	case "${IFS}${BASH_INCLUDE_INCLUDED[*]}${IFS}" in
		*"${IFS}$1${IFS}"*)
		    return 0
		;;
	esac
	return 1
}
 ##
 # Include one or many modules from @libentrydir@
 # will exit if the requested module does not exist
##
include()
{
#TODO: shift $@ to support multiple includes
	if ! try_include "$@"; then
		printf '%s: include not found: %s\n' "$0" "$1" 1>&2
		exit
	fi
}
 ##
 # Try to Include the given parameter as Module
 # @param single module name
 # @return 0 on success 1 on failure
##
try_include()
{
	is_included "$1" &&
		return 0

	force_include "$1"
#TODO: ? return 1
}
 ##
 # Force Include of a module
 # Will try to include the module and write a error message on failure
 # loads the definitions from the given include module
 # @param filename of module in @libentrydir@
##
#TODO: rename: load_init_include
force_include()
{
	local "${!SCRIPT_@}"
	local BASH_INCLUDE_INCLUDING="true"
	local included include_path path var

	case "$1" in
		*[^A-Za-z0-9_/]*|*__*)
			printf "%s: invalid include name: %s\n" "$0" "$1" 1>&2
			return 1
		;;
	esac

	# convert path for easy parsing
	include_path="${BASH_INCLUDE_PATH:-/usr/lib/bash:/usr/local/lib/bash}"
	include_path="${include_path//-/-+}"
	include_path="${include_path//\\\\/-b}"
	include_path="${include_path//\\:/-d}"
	include_path="${include_path//\\/}"

	# do parsing
	local IFS=':'
	for path in ${include_path}; do
		path="${path//-d/:}"
		path="${path//-b/\\}"
		path="${path//-+/-}"

		if [ -r "${path}/${1}" ]; then
			. "${path}/${1}"
			SCRIPT_API="${SCRIPT_API:-0}"
			unset "${!SCRIPT_@}"

			is_included "$1" ||
				BASH_INCLUDE_INCLUDED+=("$1")
			return 0;
		fi
	done
	return 1
}
