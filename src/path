#!/bin/bash
# path-tools(path) 1.0.0rc1: functions for path manipulation.
# functions:
#    path_remove_trailing_slash: write a path without trailing slash to stdout
#    path_simplyify: prints simplified path to stdout.
#    path_make_absolute: write an absolute path to stdout.
#    path_make_relative: write a relative path to stdout.
#    path_is_absolute: return true if path is absolute
#    path_is_relative: return true if path is relative
# all functions in this module obtain their first argument from stdin if no
# parameter is passed
SCRIPT_NAME="path"
SCRIPT_PREFIX="path"
SCRIPT_VERSION="1.0.0rc1"
SCRIPT_DESCRIPTION="tools for manipulation of path strings"
SCRIPT_PACKAGE="bash_include"

. bash_include
include basic
include var
module_begin "${@}"

# path_remove_trailing_slash: write a path without trailing slash to stdout
# a path is either passed as first parameter or obtained from stdin.
# writes the path to stdout ommiting any trailing slashes
path_remove_trailing_slash() (
	shopt -s extglob
	path="${1-$(cat)}"

	var_is_empty path && return
	path="${path%%*(/)}"
	printf '%s\n' "${path:-/}"
)

# path_simplyify: prints simplified path to stdout.
# the path to simplify is passed as first parameter or obtained from stdin.
path_simplify() (
	shopt -s extglob
	path="${1-$(cat)}"

	simplePath=( )
	IFS='/'
	for pathPart in $path; do
		case "$pathPart" in
		.) continue ;;
		..)
			case "${simplePath[@]: -1}" in
			..) simplePath+=("..") ;;
			'')	simplePath=( "${simplePath[0]-..}" ) ;;
			*) simplePath=( "${simplePath[@]::${#simplePath[@]}-1}" ) ;;
			esac
		;;
		'') simplePath=( "${simplePath[@]-}" ) ;;
		*) simplePath+=( "${pathPart}" ) ;;
		esac
	done
	path="${simplePath[*]-.}"
	printf '%s\n' "${path:-/}"
)

# path_make_absolute: write an absolute path to stdout.
# a path is either passed as first parameter or obtained from stdin.
#if that path is relative the current working directory is prepended.
# if no second parameter is passed that path is written to stdout.
# if a relative path is passed as second parameter it is appended to the former
# path and the result is written to stdout.
# if an absolute path is passed as second parameter that path is written to stdout.
path_make_absolute() {
	local path="$2"
	if path_is_relative "$path"; then
		path="${1-$(cat)}${path:+"/$path"}"
		if path_is_relative "$path"; then
			path="$PWD${path:+"/$path"}"
		fi
	fi
	printf '%s\n' "$path"
}

# path_make_relative: write a relative path to stdout.
# a path is either passed as first parameter or obtained from stdin.
# if a second argument is passed a relative path leading from the first path
# to the second is written to stdout.
# if no second parameter is passed a relative path leading from the current
# working directory to the passed path is written to stdout.
# if any of the paths passed is relative it is interpreted as path starting
# at the current working directory.
path_make_relative() (
	path="$(path_make_absolute ${1+"$1"} | path_simplify)/"

	IFS='/'
	if [ ${2+set} ]; then
		origin=( $path )
		destination=( $(path_make_absolute "$2" | path_simplify) )
	else
		origin=( $PWD )
		destination=( $path )
	fi

	# remove common start
	while [ "|${origin[0]}" == "|${destination[0]}" ] && (( ${#destination[@]} )); do
		destination=( "${destination[@]:1}" )
		origin=( "${origin[@]:1}" )
	done

	# move from origin to lowest common node
	for garbage in "${origin[@]}"; do
		destination=( .. "${destination[@]}" )
	done
	
	printf '%s\n' "${destination[*]:-.}"
)

# path_is_absolute: returns true if path is absolute
# a path is either passed as first parameter or obtained from stdin.
# returns true if the path starts with '/', false otherwise
path_is_absolute() {
	local path="${1-$(cat)}"
	var_not_empty path &&
		test '/' == "${path::1}"
}

# path_is_relative: returns true if path is relative
# a path is either passed as first parameter or obtained from stdin.
# returns true if the path is empty or does not start with '/', false otherwise
path_is_relative() {
	local path="${1-$(cat)}"
	var_is_empty path ||
		test '/' != "${path::1}"
}

module_end "${@}"
