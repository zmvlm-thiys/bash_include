#!/bin/bash
# path-tools(path) 1.0.0rc1: functions for path manipulation.
# functions:
#    path_remove_trailing_slash: gibt den pfad aus $1 ohne trailing slash auf stdout aus
#    path_simplify: gibt den pfad $1 vereinfacht auf stdout aus.
#    path_absolute: gibt den absoluten pfad vom zu $1 relativem pfad $2 (ist $2 nicht gegeben,
#                   zu $PWD relativem $1) aus.
#    path_relative: gibt den relativen pfad von $1 zu $2 (ist $2 nicht gegeben, von PWD zu $1)
#                   auf stdout aus.
#  fuer alle bis hier funktionen gilt, ist $1 nicht gegeben, wird inhalt von stdin als $1 genommen.
#
#    path_is_absolute: gibt 0 zurueck, wenn der pfad aus $1 absolut ist.
#    path_is_relative: gibt 0 zurueck, wenn der pfad aus $1 relativ ist.
#
SCRIPT_NAME="path"
SCRIPT_PREFIX="path"
SCRIPT_VERSION="1.0.0rc1"
SCRIPT_DESCRIPTION="tools for manipulation of path strings"
SCRIPT_PACKAGE="bash_include"

. bash_include  # load include function
include basic

module_begin "${@}"

# global variables and constants:

# path_remove_trailing_slash: gibt den pfad aus $1 ohne trailing slash auf stdout aus
path_remove_trailing_slash()
(
	shopt -s extglob

	# gibt es keine komandozeilenparameter, wird stdin für $1 benutzt.
	(( $# < 1 )) && set -- "$(cat)"
	printf "%s\n" "${1%%*(/)}"
)

# simplyify_path: gibt vereinfachten pfad auf stdout aus.
path_simplify()
(
	shopt -s extglob

	# gibt es keine komandozeilenparameter, wird stdin für $1 benutzt.
	(( $# < 1 )) && set -- "$(cat)"

	# ist $1 leer?
	test "${1:+set}" ||
		# fehler! reuckkehr zur basis.
		return ${err_INVAL}

	# <- befreien wir den pfad von ueberfluessigen slashs und einfachpunkten (trailing slash ist brauchen wir noch).
	path="$1/"
	path="${path//+(\/)//}"
	path="${path//\/.\///}"
	path="${path##.+(\/)}"

	simple_path=""  # da kommt dann der vereinfachte pfad rein.
	part_of_path="" # da kommen die stueckchen rein.
	IFS="/"         # so einfach bringt man bash dazu pfade auseinanderzunehmen.

	# schieben wir die stueckchen von path in part-of-path, eines nach dem anderen:
	for part_of_path in ${path}; do
		# ist part-of-path ".."?
		if [ "${part_of_path}" = ".." ]; then
			# da muessen wir wohl eins hoch in der hierarchie, oder?
			case "${simple_path}" in
				"/")
					# wir sind schon ganz oben? na denn koennen wir ja da auch bleiben.
				;;
				*"/../" | "../" | "")
					# wir sind schon ueber dem ausgangspunkt? na denn haengen wir einfach noch ein schritt ran.
					simple_path="${simple_path}../"
				;;
				*)
					# wir sind noch in unterverzeichnissen? gut, schmeissen wir das letzte raus.
					simple_path="${simple_path%/*/}/"
				;;
			esac
		# ein name, wir haben einen namen gefunden.
		else
			# haengen! haengen! haengen! (hinten dran natuerlich, simple-path enthaelt auf jeden fall einen trailing slash oder ist leer).
			simple_path="${simple_path}${part_of_path}/"
		fi
	done
	
	# ist der vereinfachete pfad leer?
	test -z "${simple_path}" &&
		# dann sollen wir wohl bleiben wo wir sind.
		simple_path="."

	# letzter feinschliff und ab damit.
	path_remove_trailing_slash "${simple_path}"
)

# path_absolute: macht einen relativen pfad absolut, ausgehend entweder vom pfad in $1 (wenn $2
# gegeben ist), oder vom akktuellem arbeitsverzeichnis (wenn nur $1 gegeben ist).
path_absolute()
(
	# gibt es keine komandozeilenparameter, wird stdin für $1 benutzt.
	(( $# < 1 )) && set -- "$(cat)"

	# gibt des mehr als ein parameter?
	if (( $# > 1 )); then
		# ja, dann wird source-path $1, dest-path $2.
		source_path="$(path_absolute "$1")" ||
			# es gab ein fehler in path_absolute, brechen wir ab.
			return
		dest_path="$2"
	else
		# nein, dann wird source-path das aktuelle arbeitsverzeichnis, dest-path $1.
		source_path="${PWD}"
		dest_path="$1"
	fi

	# ist dest-path absolut, koennen wir uns die arbeit sparen.
	if [ "${dest_path:0:1}" != "/" ]; then
		# dest-path ist relativ, also haengen wir den (absoluten) source-path davor.
		dest_path="${source_path}/${dest_path}"
	fi

	# path_simplify "${dest_path}" # soll der pfad am ende vereinfacht werden???
	# path_remove_trailing_slash "${dest_path}" # oder nur die /'s am ende entfert
	printf "%s\n" "${dest_path}" # oder gar nichts von beidem?, ich finde wir sollten uns da nicht einmischen.
)

# relative_path: gibt den relativen pfad von $1 zu $2 auf stdout aus.
path_relative()
(
	# gibt es keine komandozeilenparameter, wird stdin für $1 benutzt.
	(( $# < 1 )) && set -- "$(cat)"

	# gibt es mehr als einen parameter?
	if (( $# > 1 )); then
		# ja, dann wird source-path $1, dest-path $2.
		source_path="$(path_absolute "$1" | path_simplify)" ||
			# es gab ein fehler in path_absolute/path_simplify, brechen wir ab.
			return
		dest_path="$(path_absolute "$2" | path_simplify)" ||
			# es gab ein fehler in path_absolute/path_simplify, brechen wir ab.
			return
	else
		# nein, dann wird source-path das aktuelle arbeitsverzeichnis, dest-path $1.
		source_path="${PWD}"
		dest_path="$(path_absolute "$1" | path_simplify)" ||
			# es gab ein fehler in path_absolute/path_simplify, brechen wir ab.
			return
	fi

	#source-path und dest-path brauchen einen trailing slash, solange sie nicht rootpfad sind ("/"):
	# ist source-path "/"?
	test "${source_path}" != "/" &&
		# nein?, dann haengen wir einen trailing slash ran.
		source_path="${source_path}/"
	# ist dest_path "/"?
	test "${dest_path}" != "/" &&
		# nein?, dann haengen wir einen trailing slash ran.
		dest_path="${dest_path}/"
	
	# solange source-path und dest-path bis zum ersten "/" indentisch und nicht leer sind:
	while [ "X${source_path%%/*}X" = "X${dest_path%%/*}X" ] && [ "${dest_path:+set}" ]; do
		# schneiden wir djeweils den teil bis zum ersten "/" ab.
		dest_path="${dest_path#*/}"
		source_path="${source_path#*/}"
	done

	# nehmen wir den rest von source-path auseinander und bearbeiten das ganze stueck fuer stueck
	# fuer jeden schritt in der hirachie des rest von source-path:
	for garbage in ${source_path}; do
		# gehen wir einen schritt weiter nach oben.
		dest_path="../${dest_path}"
	done
	
	# wenn von dest-path nichts mehr uebrig ist, zeigt dest-path auf source-path.
	test -z "${dest_path}" &&
		dest_path="."

	path_remove_trailing_slash "${dest_path}" # wir entfernen den trailing slash wieder und fertig.
)

# path_is_absolute: gibt 0 zurueck, wenn der pfad aus $1 absolut ist.
path_is_absolute()
{
	# gibt es keine komandozeilenparameter, wird stdin für $1 benutzt.
	(( $# < 1 )) && set -- "$(cat)"

	# wenn der pfad in $1 nicht leer ist und ...
	test "${1:+set}" &&
	# ... mit '/' beginnt, ...
	test "${1:0:1}" = "/"
	# ... dann ist der pfad absolut.
}

# path_is_relative: gibt 0 zurueck, wenn der pfad aus $1 relativ ist.
path_is_relative()
{
	# gibt es keine komandozeilenparameter, wird stdin für $1 benutzt.
	(( $# < 1 )) && set -- "$(cat)"

	# wenn der pfad in $1 nicht leer ist und ...
	test "${1:+set}" &&
	# ... nicht mit '/' beginnt, ...
	test "${1:0:1}" != "/"
	# ... dann ist der pfad relativ.
}

module_end "${@}" # checks if is running stand alone, or as included module.
