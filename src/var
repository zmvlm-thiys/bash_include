#!/bin/bash
# var(var) 0.5: helper functions for bash mpd communication.
# functions:
#   <function name>: <function description>.

SCRIPT_NAME="var"
SCRIPT_PREFIX="var"
SCRIPT_VERSION="0.5"
SCRIPT_DESCRIPTION="tools for variable manipulation"
SCRIPT_PACKAGE="bash_include"
SCRIPT_API="1"

. bash_include
include basic
include err

var()
{
	set -- "$@" 0
	while ${2+true} false; do
		case "$1" in
		'@{'*'}')
			_var_reset "${1:2:${#1}-3}"
		;;
		*)
			_var_set "${1}"
		;;
		esac &&
			shift || set -- "${@:2:$#-2}" "$?"
	done
	return "$1"
}

_var_reset() {
	set -- "${1%%[^][abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_]*}" "$1"
	if ${1:+false} true; then
		printf "%s: var: no variable name in argument: %s" "$0" "@{$2}" 1>&2
		return "$err_INVAL"
	fi
	eval "${1}=\"\${$2}\""
}

_var_set()
{
	set -- "${1%%=*}" "$1"
	set -- "$1" "${2:${#1}}"
	case "$1" in
	*'['*']')
		set -- "${1%'['*}" "$2" "$1"
		;;
	esac
	if ${1:+false} true || [ "|${1/[^abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_]}|" != "|$1|" ]; then
		printf "%s: var: \`%s': not a valid variable name\n" "$0" "${3:-$1}" 1>&2
		return "$err_INVAL"
	fi
	test -z "$2" && var_is_set ${3:-$1} && return
	eval "${3:-$1}=\"\${2:1}\""
}

var_init()
{
	if [ "${3+set}" ]; then
		var "@{$1-$2}"
	else
		var "@{$1:-$2}"
	fi
}

var_script_init() {
	var_init "${SCRIPT_PREFIX}_$@"
}

var_print() {
	while ${1+true} false; do
		${!1+true} false &&
			printf '%s=%s\n' "$1" "$(var_escape "${!1}")"
		shift
	done
}

var_escape() {
	local string="${1//\\/\\\\}"
	local string="${string//\"/\\\"}"
	local string="${string//\$/\\\$}"
	printf '"%s"' "${string}"
}

var_is_set() {
	${!1+true} false
}

var_not_set() {
	${!1+false} true
}

var_is_empty() {
	${!1:+false} true
}

var_not_empty() {
	${!1:+true} false
}

var_expand() {
	(( $# > 0 )) ||
		return

	eval "printf '%s' \"\${$1}\""

	while ${2+true} false; do
		shift
		eval "printf '%s%s' \"\${IFS:0:1}\" \"\${$1}\""
	done
}

@() {
	var_expand "$@"
}

module_end "$@"
