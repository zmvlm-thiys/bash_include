#!/bin/bash
# var(var) 0.5: helper functions for bash mpd communication.
# functions:
#   <function name>: <function description>.

SCRIPT_NAME="var"
SCRIPT_PREFIX="var"
SCRIPT_VERSION="0.5"
SCRIPT_DESCRIPTION="tools for variable manipulation"
SCRIPT_PACKAGE="bash_include"
SCRIPT_API="1"

. bash_include
include basic
include err

var()
{
	local var_name_value var_name var_value var_index var_return_value

	if (( $# < 1 )); then
		var_print
		return
	fi

	var_return_value=0
	for var_name_value in "${@}"; do
		var_index=''
		case "${var_name_value}" in
			*'['*']''='*)
				var_name="${var_name_value%%"["*"]"=*}"
				var_index="${var_name_value%%]=*}"
				var_index="${var_index##*[}"
				var_value="${var_name_value#*=}"
			;;
			*'='*)
				var_name="${var_name_value%%=*}"
				var_value="${var_name_value#*=}"
			;;
			*)
				var_name="${var_name_value}"
				var_value=''
			;;
		esac
		if [ -z "${var_name}" ] || [ "X${var_name/[^abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_]}X" != "X${var_name}X" ]; then
			printf '%s: var: %s: not a valid identifier\n' "$0" "${var_name_value%%=*}" 1>&2
			var_return_value="${err_INVAL}"
			continue
		fi
		eval "${var_name}${var_index:+[${var_index}]}=\"\${var_value}\""
	done

	return "${var_return_value}"
}

var_init()
{
	local var_name var_default_value var_value

	(( $# < 2 )) &&
		return err_NOARG

	var_name="$1"
	var_default_value="$2"

	if [ "${3+set}" ]; then
		var_value="${!var_name-${var_default_value}}"
	else
		var_value="${!var_name:-${var_default_value}}"
	fi

	var "${var_name}=${var_value}"
}

var_print()
(
	set |
	{
		IFS=$'\n'
		while read -r line; do
			case "${line}" in
				[A-Za-z_]*=*)
					printf '%s\n' "${line}"
				;;
			esac
		done
	}
)

var_script_init()
{
	var_init "${SCRIPT_PREFIX}_$@"
}

var_is_set()
{
	${!1+true} false
}

var_not_set()
{
	${!1+false} true
}

var_is_empty()
{
	${!1:+false} true
}

var_not_empty()
{
	${!1:+true} false
}

@()
{
	(( $# > 0 )) ||
		return
	eval "set -- $(printf -- '"${%s}"${IFS:0:1}' "$@")"

	printf '%s' "$1"
	shift

	for var in "$@"; do
		printf '%s%s' "${IFS:0:1}" "${var}"
	done
}

var_expand()
{
	@ "$@"
}
